import java.util.concurrent.locks.ReentrantLock

var ReentrantLock lock  = new ReentrantLock()
var String volumeCommand

rule "Spotify run script"
    when
		Item spotify_forceupadte received update
	then		
        val resp =  executeCommandLine("/usr/bin/python /etc/openhab2/scripts/spotify.py", 5000)
        logInfo("Spotify", resp)
end

rule "Spotify Action"
    when
		Item spotify_action received command
	then
	
        logInfo("Spotify", "Execute action [{}] ", spotify_action.state.toString)	
        val resp =  executeCommandLine("/usr/bin/python /etc/openhab2/scripts/spotify.py " + spotify_action.state.toString, 5000)
        //Recently updating in the script is too fastfor the webapi and old details overwrite any local updates.
        //Should really use this to set a timer so you don't get multiple updates when pressing multiple buttons in sucession
        Thread::sleep(500)
        sendCommand(spotify_forceupadte,ON)
        logInfo("Spotify", "Finalise Action [{}] for [{}] ", spotify_action.state.toString, resp)
end


rule "Spotify Alexa play"
	when
		Item HuePlaySpotify received command
		or
		Item HuePlaySpotify1 received command
	then
		if(receivedCommand == ON){
			sendCommand(spotify_action, 'play')
		}
		else {
			sendCommand(spotify_action, 'pause')
		}
end

rule "Spotify play fixed"
    when
		Item OpenhabPlay received update
    then
		sendCommand(spotify_action, "play \"Jesse's 2nd echo\" spotify:album:1Mrv9cxsetXUfwNtQk0Dht")
end

//Hey Google Spotify <command>, e.g. Hey google Spotify play

rule "Spotify Automated Action"
    when
        Item PlayString received command
    then
    
        logInfo("Spotify", "send Playstring [{}]", PlayString.state)
        sendCommand(spotify_action, PlayString.state.toString)	
    
end

rule "spotify manual update"
	when 						
		Item spotify_proxy_update received update
	then

	logInfo("Spotify", "Manual update requested at [{}] previous update at [{}]", now, spotify_lastConnectionDateTime.state)
	if (parse(spotify_lastConnectionDateTime.state.toString).plusSeconds(45).isBefore(now)) {
		sendCommand(spotify_forceupadte, ON)
		logInfo("Spotify", "Manual update completed")
	}
	
end

rule "spotify live update"
    when
        Time cron "0/30 * * * * ?"
    then

        if ( spotify_current_playing.state == ON && parse(spotify_lastConnectionDateTime.state.toString).plusSeconds(20).isBefore(now)){            
            sendCommand(spotify_forceupadte, ON)
            logInfo("Spotify", "Chrom live update run")		
        }
end
	
rule "spotify update"
    when
        Time cron "* 0/30 * * * ?"
    then
        logInfo("Spotify", "Chron prelock")
        if (parse(spotify_lastConnectionDateTime.state.toString).plusSeconds(45).isBefore(now)){			

            sendCommand(spotify_forceupadte, ON)
            logInfo("Spotify", "Chrom  update run")	
        }
end

rule "spotify device update"
    when
        Time cron "* 0/45 * * * ?"
        or
        Item spotify_device_update received command
    then
        logInfo("Spotify", " prelock update device")

        sendCommand(spotify_action, "devices")
        logInfo("Spotify", "Chrom device  update run")
end
		


rule "Spotify Set Volume"
    when
		Item spotify_set_volume received command
	then	
	    

    		logInfo("Spotify", "Set Volume {}", receivedCommand.toString)
        	if (spotify_device_id.state == "766955b926defdf6d4187ab0881c6ce6a7863013") {
        		logInfo("Spotify", "Set Volume on TV {}", receivedCommand.toString)	
        		if ( receivedCommand == "volume_up" || receivedCommand == "up") { 
        			sendCommand(HarmonyLG, "VolumeUp")
        		}
        		else if ( receivedCommand == "volume_down" || receivedCommand == "down") { 
        			sendCommand(HarmonyLG, "VolumeDown") 
        		}
        		else if ( receivedCommand == "mute" ||  receivedCommand == "0" ) {
        			sendCommand(HarmonyLG, "mute") 
        		}
        		else if ( (receivedCommand as Number).intValue > 50 )  {
        			sendCommand(HarmonyLG, "VolumeUp") 
        		}
        		else {
        			sendCommand(HarmonyLG, "VolumeDown") 
        		}		
        	}
        	else {
        		//Note going through all parts
        		logInfo("Spotify", "Set spotify {}", receivedCommand)
        		if(receivedCommand == "volume_up" || receivedCommand == "volume_down" ) {
        			sendCommand(spotify_action, receivedCommand)
        			logInfo("Spotify", "stoped here vol {}", receivedCommand)
        		}
        		else if(receivedCommand == "up" || receivedCommand == "down"){
        			sendCommand(spotify_action, "\"volume_" + receivedCommand + "\"")
        			logInfo("Spotify", "stoped here up{}", receivedCommand)
        		}        
        		else if( receivedCommand == "mute" ||  receivedCommand == "0" ) {
        			logInfo("Spotify", "stoped here mute {}", receivedCommand)
        			if ((spotify_current_volume.state as Number).intValue == 0) {
        				if(spotify_unmute_volume.state == NULL ){sendCommand(spotify_unmute_volume, 30)}
        				logInfo("Spotify", "Set unmute {}", spotify_unmute_volume.state)
        				sendCommand(spotify_action, "volume \"" + spotify_unmute_volume.state.toString + "\"")        	
        			logInfo("Spotify", "stoped here mut2{}", receivedCommand)
        			}
        			else {
        				sendCommand(spotify_unmute_volume, (spotify_current_volume.state as Number).intValue)
        				sendCommand(spotify_action, "mute")
        			logInfo("Spotify", "stoped here mute3{}", receivedCommand)
        			}
        		}
        		else if( (receivedCommand as Number).intValue < 100 && (receivedCommand as Number).intValue > 0 ) {
        			logInfo("Spotify", "Set volume {} for {}", receivedCommand.toString, (receivedCommand as Number).intValue)	
        			sendCommand(spotify_action, "volume \"" + receivedCommand.toString + "\"")
        		}
        		else {   
        			logInfo("Spotify", "Fall Through {}", receivedCommand)	
        		     			
        			sendCommand(spotify_action, receivedCommand)
        		}
        	}
        			 
     
end


rule "rest Lock"
	when 						
		Item resetLock received command
	then
	lock.unlock()
end
